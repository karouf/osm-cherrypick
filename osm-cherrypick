#!/usr/bin/ruby

require 'rexml/document'
include REXML

# Get arguments from the command line

# Get the OSM file
input = ARGV.shift
if input.nil?
	puts "Input file: argument required."
	exit
end
unless File.exists?(input)
	puts "Input file doesn't exist."
	exit
end


# Get the output file
output = ARGV.shift
if output.nil?
	puts "Output file: argument required."
	exit
end


# Get the features to pick and parse it
# Put the result in an array, one feature per row
features = ARGV

# Open OSM file
input_doc = Document.new(File.new(input))


# Create new XML doc for output
output_doc = Document.new
output_doc << input_doc.xml_decl
output_doc << Element.new(input_doc.root)
output_doc.root.add_attributes( { "generator" => "osm-cherrypick" } )

# For each feature
for feature in features do
	type, tag = feature.split(":")
	key, value = tag.split("=")
	
	case type
	when "node"
		# Get the feature from the file
		input_doc.root.each_element("#{type}/tag[@k='#{key}' and @v='#{value}']/..") {|node|
			# Add the feature to the output doc
			output_doc.root.add_element(node)
		}
	when "way"
		#puts "Ways are not supported yet!"
		# Get the feature from the file
		input_doc.root.each_element("#{type}/tag[@k='#{key}' and @v='#{value}']/..") {|way|
			puts "Way id: #{way.attributes['id']}"
			# Add the feature to the output doc
			way.each_element("nd") {|node|
				puts "Node ref in way: #{node.attributes['ref']}"
				# Get the feature from the file
				input_doc.root.each_element("node[@id='#{node.attributes['ref']}']") {|the_node|
					puts "Node id: #{the_node.attributes['id']}"
					# Add the feature to the output doc
					output_doc.root.add_element(the_node)
				}
			}
			output_doc.root.add_element(way)
		}
	when "relation"
		puts "Relations are not supported yet!"
	else
		puts "Wrong type of object: #{feature}"
	end
end
#

# Write XML doc to the output file
File.open( output, "w" ) { |f|
      output_doc.write( f, 0, false)
    }
