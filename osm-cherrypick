#!/usr/bin/ruby

require 'rubygems'
require 'xml/libxml'
include XML

# Get arguments from the command line
# Get the OSM file
input = ARGV.shift
if input.nil?
	puts "Input file: argument required."
	exit
end
unless File.exists?(input)
	puts "Input file doesn't exist."
	exit
end


# Get the output file
output = ARGV.shift
if output.nil?
	puts "Output file: argument required."
	exit
end


# Get the features to pick and parse it
# Put the result in an array, one feature per row
features = ARGV


# Open OSM file
$input_doc = Document.file(input)


# Create new XML doc for output
$output_doc = Document.new
#output_doc << input_doc.xml_decl
#output_doc.root = input_doc.root
#output_doc.root['generator'] = "osm-cherrypick"
$output_doc.root = Node.new('osm')
$output_doc.root['version'] = '0.5'
$output_doc.root['generator'] = 'osm-cherrypick'

def extract_node(id)
  $input_doc.find("node[@id='#{id}']").each do |node|
		#puts "Node id: #{the_node['id']}"
		# Add the feature to the output doc
		$output_doc.root.child_add(node)
	end
end

def extract_way(id)
  $input_doc.find("way[@id='#{id}']").each do |way|
		#puts "Node id: #{the_node['id']}"
		# Add the feature to the output doc
		way.find("nd").each do |node|
			#puts "Node ref in way: #{node['ref']}"
			# Get the feature from the file
			extract_node(node['ref'])
			#$input_doc.find("node[@id='#{node['ref']}']").each do |the_node|
				#puts "Node id: #{the_node['id']}"
				# Add the feature to the output doc
				#$output_doc.root.child_add(the_node)
			#end
		end
		$output_doc.root.child_add(way)
	end
end

def extract_relation(id)
  $input_doc.find("relation[@id='#{id}']").each do |relation|
    relation.find("member").each do |member|
      case member['type']
      when "node"
        extract_node(member['ref'])
      when "way"
        extract_way(member['ref'])
      when "relation"
        extract_relation(member['ref'])
      else
        puts "Bad shit happened!"
        raise
      end
    end
    $output_doc.root.child_add(relation)
  end
end

def extract_nodes(key, value)
  $input_doc.find("/osm/node/tag[@k='#{key}' and @v='#{value}']/..").each do |node|
		# Add the feature to the output doc
		#extract_node(node['id'])
		$output_doc.root.child_add(node)
		#puts "Node id: #{node['id']}"
	end
end

def extract_ways(key, value)
	# Get the feature from the file
	$input_doc.find("/osm/way/tag[@k='#{key}' and @v='#{value}']/..").each do |way|
		#puts "Way id: #{way['id']}"
		# Add the feature to the output doc
		way.find("nd").each do |node|
			#puts "Node ref in way: #{node['ref']}"
			# Get the feature from the file
			extract_node(node['ref'])
			#$input_doc.find("node[@id='#{node['ref']}']").each do |the_node|
				#puts "Node id: #{the_node['id']}"
				# Add the feature to the output doc
				#$output_doc.root.child_add(the_node)
			#end
		end
		$output_doc.root.child_add(way)
	end
end

def extract_relations(key, value)
  $input_doc.find("/osm/relation/tag[@k='#{key}' and @v='#{value}']/..").each do |relation|
    relation.find("member").each do |member|
      case member['type']
      when "node"
        extract_node(member['ref'])
      when "way"
        extract_way(member['ref'])
      when "relation"
        extract_relation(member['ref'])
      else
        puts "Bad shit happened!"
        raise
      end
    end
    $output_doc.root.child_add(relation)
  end
end


# For each feature
for feature in features do
	type, tag = feature.split(":")
	key, value = tag.split("=")
	
	case type
	when "node"
		# Get the feature from the file
		extract_nodes(key, value)
	when "way"
		extract_ways(key, value)
	when "relation"
		extract_relations(key, value)
	else
		puts "Wrong type of object: #{feature}"
	end
end
#

# Write XML doc to the output file
format = true
$output_doc.save(output, format)
